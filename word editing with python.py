#Author: David Preiss
#Date: 7/19/2022

# Hello and Welcome to My Code!

# My name is David Preiss
# #This python script is supposed to automate the completion of STR documents
# So far, this script:
# notes the directory in which it is running
# opens a specific docx file in that directory,
# lists the paragraphs of the file
# saves to that same name and location

########### IMPORTS ########

# #word editing with python

from docx import Document # for opening and editing docx
import datetime # for naming the folder
from datetime import date # for putting the date of the signature
import pathlib #incase we need the path
import csv # for reading from the csv
import os # for changing working directory

###### METHODS ####

def AutoFiller_For_C_and_D(sourceFile,destinationFile,inputTest,inputResults,inputTesterName,inputDate,inputAnomalies):
    document = Document(sourceFile)
    if (document.core_properties.title == 'Generated by David Preiss'):
        document.tables[3].rows[0].cells[0].text = inputTest
        document.tables[4].rows[0].cells[0].text = inputResults
        document.tables[5].rows[1].cells[0].text = inputTesterName
        document.tables[5].rows[1].cells[1].text = inputDate
        document.tables[5].rows[1].cells[3].text = str(inputAnomalies)
    else:
        document.tables[0].rows[14].cells[0].text = inputTest
        document.tables[0].rows[18].cells[0].text = inputResults
        document.tables[0].rows[21].cells[0].text = inputTesterName
        document.tables[0].rows[21].cells[5].text = inputDate
        document.tables[0].rows[21].cells[16].text = str(inputAnomalies)
    document.save(destinationFile)
    return

def STR_Generation_Script():

    s_targetDoc = "Engineering Test Report Form-B2B.docx"

    s_readDoc = s_targetDoc
    s_FolderName = str(datetime.datetime.now()).replace(":","_")

    print(s_FolderName)
    os.mkdir(s_FolderName)

    s_Name_of_CSV = "B2B STPr csv.csv"
    with open(s_Name_of_CSV, newline='') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=',', quotechar='|')
        for row in spamreader:

            # print(row[3])

            if (row[1]!="Owner" and row[3]!=""):
                b_newDoc = False
                print("Test: ",row[0],"\t Date: ",row[3],'\n name: ',row[1])

                #Open a STR docx with A and B filled in, but not C or D
                # Fill in C with the Test Number
                # Fill in D with Results, Name, Current Date, and anomolies
                # save as a new Document under a newfolder, named for the test
                AutoFiller_For_C_and_D(s_readDoc, s_FolderName+'/'+row[0]+'.docx', row[0], 'Test Passed', row[1], row[3], 0)

def GenCSV_template():
    # Generates a .csv file for STPrs
    print("Generating csv file...")

    try:
        # open the file in the write mode
        f = open('template.csv', 'w')

        # create the csv writer
        writer = csv.writer(f)

        #Create Header
        header = ['Test Number', 'Tester Signature', 'Date Started', 'Date Completed', 'Result Pass/Fail', 'Anomalies', 'Additional Notes']

        # write a row to the csv file
        writer.writerow(header)

        print('Successfully generated template.csv')
    except:
        print('ERROR! Failed to generate csv file')

def GenDOCX_template():
    # Generates a .docx template for STRs
    print("Generating docx file...")

    try:

        newDoc = Document()
        newDoc.core_properties.title = 'Generated by David Preiss'

        newDoc.add_paragraph('a. Identification:')

        table1 = newDoc.add_table(rows=2,cols=4)
        table1.style = 'Table Grid'
        table1.style.font.size = 100000
        table1.rows[0].cells[0].text = 'Date:'
        table1.rows[0].cells[1].text = 'Project Number:'
        table1.rows[0].cells[2].text = 'Project Name:'
        table1.rows[0].cells[3].text = 'Report Number:'

        table2 = newDoc.add_table(rows=2,cols=3)
        table2.style = 'Table Grid'
        table2.rows[0].cells[0].text = 'Test Procedure-Document Number:'
        table2.rows[0].cells[1].text = 'Rev:'
        table2.rows[0].cells[2].text = 'Document Title:'

        newDoc.add_paragraph('b. Type of Test:')

        table3 = newDoc.add_table(rows=5,cols=8)
        table3.style = 'Table Grid'
        table3.rows[0].cells[1].text = 'Software:'
        table3.rows[0].cells[3].text = 'System:'
        table3.rows[0].cells[5].text = 'Qualification:'
        table3.rows[0].cells[7].text = 'Field / Acceptance:'

        table3.rows[1].cells[1].text = 'Integration Test'
        table3.rows[1].cells[3].text = 'Integration Test'
        table3.rows[1].cells[5].text = 'Functional Test'
        table3.rows[1].cells[7].text = 'FAI / Acceptance'

        table3.rows[2].cells[1].text = 'Requirements Test'
        table3.rows[2].cells[3].text = 'Functional Test'
        table3.rows[2].cells[5].text = 'Temperature Test'
        table3.rows[2].cells[7].text = 'Static Field Test'
        
        table3.rows[3].cells[5].text = 'Shock & Vibration'
        table3.rows[3].cells[7].text = 'Dynamic Field Test'
        
        table3.rows[4].cells[5].text = 'EMI / EMC Test'

        newDoc.add_paragraph('c. Test objective(s):')

        table4 = newDoc.add_table(rows=1,cols=1)
        table4.style = 'Table Grid'

        newDoc.add_paragraph('d. Summary of Test Results:')

        table5 = newDoc.add_table(rows=1,cols=1)
        table5.style = 'Table Grid'

        table6 = newDoc.add_table(rows=2,cols=4)
        table6.style = 'Table Grid'
        table6.rows[0].cells[0].text = 'Test Conducted by:'
        table6.rows[0].cells[1].text = 'Date:'
        table6.rows[0].cells[3].text = 'Number of Anomalies Reported:'

        newDoc.add_paragraph('e. Final disposition/audit of test result(s):')

        table7 = newDoc.add_table(rows=1,cols=1)
        table7.style = 'Table Grid'

        table8 = newDoc.add_table(rows=2,cols=4)
        table8.style = 'Table Grid'
        table8.rows[0].cells[0].text = 'Report Approved by:'
        table8.rows[0].cells[1].text = 'Date:'

        newDoc.save('template.docx')
        print('Successfully generated template.docx')
    except:
        
        print('ERROR! Failed to generate docx file')

def GenManySTRs(s_Name_of_CSV, s_readDoc):

    
    # Generates STR for each test in a .csv
    
    #create a folder named after the current time and date
    s_FolderName = str(datetime.datetime.now()).replace(":","_")
    os.mkdir(s_FolderName)

    with open(s_Name_of_CSV, newline='') as csvfile:
        spamreader = csv.reader(csvfile, delimiter=',', quotechar='|')
        for row in spamreader:

            # print(row[3])

            if (row[0]!="" and row[1]!="" and row[3]!=""):

                #Open a STR docx with A and B filled in, but not C or D
                # Fill in C with the Test Number
                # Fill in D with Results, Name, Current Date, and anomolies
                # save as a new Document under a newfolder, named for the test

                AutoFiller_For_C_and_D(s_readDoc, s_FolderName+'/'+row[0]+'.docx', row[0], row[4], row[1], row[3], row[5])
    print('Many STRs Generated')
                

def MainMenu3():
    
    print('you chose option 3')
    s_csvFile = input('CSV file path:')
    s_docxFile = input('DOCX file path:')
    GenManySTRs(s_csvFile,s_docxFile)
    return



############### CODE START #############


# getting current path and switching working directory to it
s_thisPath = str(pathlib.Path(__file__).parent.resolve())
print("Script is running from: ", s_thisPath)
os.chdir(s_thisPath)

# Make variables for the target CSV and DOCX file
s_CSV_target = ''
s_DOCX_target = ''
# Make a list of every CSV and DOCX file in the local directory
listCSV = []
listDOCX = []
dir_list = os.listdir(s_thisPath)

# Populate the lists and targets
for localfile in dir_list:
    if (localfile[-4:]=='.csv'):
        listCSV.append(localfile)
        s_CSV_target = localfile
    if (localfile[-5:]=='.docx'):
        listDOCX.append(localfile)
        s_DOCX_target = localfile

# if there is only 1 docx file and only 1 csv file, skip the menu and immediatley generate the STRs
if (len(listDOCX)==1 and len(listCSV)==1):
    b_repeat = False
    print('Target CSV: ',s_CSV_target,'\nTarget DOCX: ',s_DOCX_target)
    GenManySTRs(s_CSV_target, s_DOCX_target)
else:
    b_repeat = True

# Main Menu
s_MainMenu = '''Main Menu - input the number
\t(1) Generate .csv template
\t(2) Generate .docx template
\t(3) Generate STRs from path
\t(4) Generate STRs from targets
\t(0) EXIT\n\t'''
while (b_repeat):
    print('Target CSV: ',s_CSV_target,'\nTarget DOCX: ',s_DOCX_target)
    inputFirst = input(s_MainMenu)
    match inputFirst:
        case '0':
            b_repeat = False
        case '1':
            GenCSV_template()
        case '2':
            GenDOCX_template()
        case '3':
            MainMenu3()
        case '4':
            GenManySTRs(s_CSV_target, s_DOCX_target)
        case _:
            print('invalid input')


# s_STR_Date_in = "s_STR_Date"
# s_STR_Date_out = "s_STR_Date"
# s_STR_ProjectNum = "s_STR_ProjectNum"
# s_STR_ProjectName = "s_STR_ProjectName"
# s_STR_ReportNum = "s_STR_ReportNum"
# s_STR_DocNum = "s_STR_DocNum"
# s_STR_Rev = "s_STR_Rev"
# s_STR_DocTitle = "s_STR_DocTitle"

# s_STR_TypeOfTest = "Functional Test"

# S_STR_C_TestObjectives = "S_STR_C_TestObjectives"

# s_STR_D_SummaryOfTestResults = "s_STR_D_SummaryOfTestResults"
# i_STR_D_Anomalies = 0
# def STR_Value(input):
#     match input:
#         case s_STR_Date_in:
#             return s_STR_Date_out


# download excel file of tests to local machine
# run script
# script creates copy of STR word document template and populates all sections that remain the same between tests to create cloneSTR
# script reads test numbers and pass/fail from excel file
# for each test number with a pass/fail result, script creates a copy of the cloneSTR and populates sections C and D

# # STR Doc Info
# s_STR_Date = "s_STR_Date"
# s_STR_ProjectNum = "s_STR_ProjectNum"
# s_STR_ProjectName = "s_STR_ProjectName"
# s_STR_ReportNum = "s_STR_ReportNum"
# s_STR_DocNum = "s_STR_DocNum"
# s_STR_Rev = "s_STR_Rev"
# s_STR_DocTitle = "s_STR_DocTitle"

# s_STR_TypeOfTest = "Functional Test"

# S_STR_C_TestObjectives = "S_STR_C_TestObjectives"

# s_STR_D_SummaryOfTestResults = "s_STR_D_SummaryOfTestResults"
# s_STR_D_Name = "s_STR_D_Name"
# s_STR_D_Date = "s_STR_D_Date"
# i_STR_D_Anomalies = 0




# try:
#     document = Document(s_readDoc)
# except:
#     print("ERROR: ",s_targetDoc," Not found, creating new file")
#     document = Document()
#     document.core_properties.title = s_targetDoc
#     b_newDoc = True

# i_parasize = len(document.paragraphs)

# if (i_parasize<2):
    
#     document.add_paragraph("This is "+s_targetDoc)
#     i_parasize += 1


# document.tables[0].rows[2].cells[3].text = "wow"

# print("\n Document name: ", document.core_properties.title)
# print("\n Document name: ", s_targetDoc)
# print("Number of paragraphs = ", i_parasize)

# print("This is the list of paragraphs:")
# i_thingCounter = 1
# for thing in document.paragraphs:
#     print("\t",i_thingCounter, " ",thing.text,"\n\t",thing)
#     i_thingCounter += 1

# def AutoFiller_For_C_and_D(sourceFile,destinationFile,inputTest,inputResults,inputTesterName,inputDate,inputAnomalies):
#     document = Document(sourceFile)
#     document.tables[0].rows[14].cells[0].text = inputTest
#     document.tables[0].rows[18].cells[0].text = inputResults
#     document.tables[0].rows[21].cells[0].text = inputTesterName
#     document.tables[0].rows[21].cells[5].text = inputDate
#     document.tables[0].rows[21].cells[16].text = str(inputAnomalies)
#     document.save(destinationFile)


# print("This is the list of rows in the first table:")
# i_thingCounter = 1
# for thing in document.tables[0].rows:
#     if(i_thingCounter == 15):
#         thing.cells[0].text = S_STR_C_TestObjectives
#     if(i_thingCounter == 19):
#         thing.cells[0].text = s_STR_D_SummaryOfTestResults
#     if(i_thingCounter == 22):
#         thing.cells[0].text = s_STR_D_Name
#     print("\t",i_thingCounter, " ",thing.cells[0].text)
#     i_thingCounter += 1

# print("This is the list of cells in the third row:")
# i_thingCounter = 1
# for thing in document.tables[0].rows[21].cells:
#     if (i_thingCounter == 6):
#         thing.text = s_STR_D_Date
#     if (i_thingCounter == 17):
#         thing.text = "i_STR_D_Anomalies"
#     print("\t",i_thingCounter, " ",thing.text)
#     i_thingCounter += 1


# print("about to save")
# document.save(s_saveDoc)
print("END OF SCRIPT")